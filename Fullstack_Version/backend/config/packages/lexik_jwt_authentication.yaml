lexik_jwt_authentication:
    secret_key: '%env(resolve:JWT_SECRET_KEY)%'
    public_key: '%env(resolve:JWT_PUBLIC_KEY)%'
    pass_phrase: '%env(JWT_PASSPHRASE)%'
    token_ttl: 300 
    #user_identity_field: username # Column name in 'User' table under which the JWT will use together with 'role' column to generate token
    clock_skew: 0
    allow_no_expiration: false # set to true to allow tokens without exp claim

    # token encoding/decoding settings
    encoder:
        # token encoder/decoder service - default implementation based on the lcobucci/jwt library
        service: lexik_jwt_authentication.encoder.lcobucci

        # encryption algorithm used by the encoder service
        signature_algorithm: RS256
    
    # token extraction settings
    token_extractors:
        # look for a token as Authorization Header
        authorization_header:
            enabled: false
            prefix:  Bearer
            name:    Authorization

        # check token in a cookie
        cookie:
            enabled: true
            name:    access_

        # check token in query string parameter
        query_parameter:
            enabled: false
            name:    bearer

        # check token in a cookie
        split_cookie:
            enabled: false
            cookies:
                - jwt_hp
                - jwt_s
    # set token in cookies
    set_cookies:
        access_: ~

    # remove the token from the response body when using cookies
    remove_token_from_body_when_cookies_used: true
